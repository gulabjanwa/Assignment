LAB EXERCISE
• Task 1:

• Create a simple counter application using Redux for state management.
Implementactions to increment and decrement the counter.


==>
1. counterSlice.js=>

const initialState = { count: 0 };

export const increment = () => ({ type: "INCREMENT" });
export const decrement = () => ({ type: "DECREMENT" });

export default function counterReducer(state = initialState, action) {
  switch (action.type) {
    case "INCREMENT":
      return { count: state.count + 1 };
    case "DECREMENT":
      return { count: state.count - 1 };
    default:
      return state;
  }
}

2. store.js=>

import { createStore } from 'redux';
import counterReducer from './counterSlice';

const store = createStore(counterReducer);
export default store;

3. App.js=>

import React from 'react';
import { Provider, useDispatch, useSelector } from 'react-redux';
import store from './store';
import { increment, decrement } from './counterSlice';

function CounterApp() {
  const count = useSelector(state => state.count);
  const dispatch = useDispatch();

  return (
    <div>
      <h2>Counter: {count}</h2>
      <button onClick={() => dispatch(decrement())}>-</button>
      <button onClick={() => dispatch(increment())}>+</button>
    </div>
  );
}

export default function App() {
  return (
    <Provider store={store}>
      <CounterApp />
    </Provider>
  );
}

----------------------------------------------------------------------------------------------------------------------------------------------

• Task 2:
• Build a todo list application using Recoil for state management. Allow users to
add,remove, and mark tasks as complete.

==>
1. features/users/userSlice.js
import { createSlice } from '@reduxjs/toolkit';

const userSlice = createSlice({
  name: 'users',
  initialState: [],
  reducers: {
    addUser: (state, action) => {
      state.push(action.payload);
    },
    deleteUser: (state, action) => {
      return state.filter(user => user.id !== action.payload);
    },
    updateUser: (state, action) => {
      const index = state.findIndex(user => user.id === action.payload.id);
      state[index] = action.payload;
    }
  }
});

export const { addUser, deleteUser, updateUser } = userSlice.actions;
export default userSlice.reducer;

2.store.js
import { configureStore } from '@reduxjs/toolkit';
import userReducer from './features/users/userSlice';

export default configureStore({
  reducer: {
    users: userReducer,
  }
});


3.UserApp.js
import React, { useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { addUser, deleteUser, updateUser } from './features/users/userSlice';

export default function UserApp() {
  const [name, setName] = useState('');
  const [editingId, setEditingId] = useState(null);
  const users = useSelector((state) => state.users);
  const dispatch = useDispatch();

  const handleSubmit = () => {
    if (editingId) {
      dispatch(updateUser({ id: editingId, name }));
      setEditingId(null);
    } else {
      dispatch(addUser({ id: Date.now(), name }));
    }
    setName('');
  };

  return (
    <div>
      <h2>CRUD App</h2>
      <input value={name} onChange={e => setName(e.target.value)} />
      <button onClick={handleSubmit}>{editingId ? 'Update' : 'Add'}</button>

      <ul>
        {users.map(user => (
          <li key={user.id}>
            {user.name} 
            <button onClick={() => {
              setEditingId(user.id);
              setName(user.name);
            }}>✏️</button>
            <button onClick={() => dispatch(deleteUser(user.id))}>❌</button>
          </li>
        ))}
      </ul>
    </div>
  );
}



